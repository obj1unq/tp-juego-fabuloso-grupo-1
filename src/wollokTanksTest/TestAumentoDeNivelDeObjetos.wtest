import wollok.game.*
import enemigo.*
import base.*
import orientaciones.*
import powerUps.*
import randomizer.*
import tanque.*
import bala.*
import managerpowerup.*
import paredes.*
import nivel.*
import efectos.*
import ObjetosTest.*

describe "wollok Tanques" {
	var balaEnemigo
	var tanque
	var enemigo
	var balaTanque
	var paredNivel1
	var balaNivel1
	var balaNivel2
	var balaNivel3
	var balaNivel4
	var enemigoConPosicion
	fixture {
		game.clear() //limpio juego antes de test
		tanque = new Tanque(orientacion=este,position=game.at(base.position().x() -2,base.position().y()))
		enemigo = new TanqueEnemigo()
		balaEnemigo = new BalaComun(position = enemigo.position(), orientacion= enemigo.orientacion(),nivel= enemigo.nivel() )
		balaTanque = new BalaComun(position = tanque.position(), orientacion= tanque.orientacion(),nivel= tanque.nivel() )
		paredNivel1 = new Pared()
		balaNivel1=new BalaComun(nivel=1)
		balaNivel2=new BalaComun(nivel=2)
		balaNivel3=new BalaComun(nivel=3)
		balaNivel4=new BalaComun(nivel=4)
		enemigoConPosicion= new TanqueEnemigo(position = game.center(),objetivo= tanque)
	}
	

	// danio de balas segun nivel
	test "bala de diferentes nivel con diferentes danio"{
		assert.equals (15, balaNivel1.danio())
		assert.equals (30, balaNivel2.danio())
		assert.equals (45, balaNivel3.danio())
		assert.equals (60, balaNivel4.danio())
	}
	
		// objetos reciben danio
	
	test "bala nivel1 con 15 de danio quita la misma cantidad de Vida al tanque" {
		assert.equals(100, tanque.vida())
		assert.equals(0, tanque.danioRecibido())
		assert.equals(100, tanque.vidaRestante())
		tanque.aplicarEfectoDeObjeto(balaNivel1)
		assert.equals(85, tanque.vidaRestante())
		assert.equals(15, tanque.danioRecibido())	
	}
	
	test "tanque Al dispara genera bala en el juego" {
		const cantidadVisualesEnElJuego= game.allVisuals().size()
		tanque.disparar()
		assert.equals(cantidadVisualesEnElJuego + 1 , game.allVisuals().size())
	}

	test "tanque al dispara genera Bala con el mismo nivel que el tanque"{
		
		var objetosNivel1EnJuego= game.allVisuals().filter{unObjeto=> unObjeto.nivel() == 1}
		assert.equals(0, objetosNivel1EnJuego.size())
		tanque.disparar()
		objetosNivel1EnJuego= game.allVisuals().filter{unObjeto=> unObjeto.nivel() == 1}
		assert.equals(1, objetosNivel1EnJuego.size())
	}
	test "tanque enemigo de bala Tanque recibe Danio"{
		assert.equals(100, enemigo.vida())
		assert.equals(0, enemigo.danioRecibido())
		assert.equals(100, enemigo.vidaRestante())
		enemigo.aplicarEfectoDeObjeto(balaNivel1)
		assert.equals(85, enemigo.vidaRestante())
		assert.equals(15, enemigo.danioRecibido())
		assert.equals(100, enemigo.vida())		
	}
	
	test "las Paredes reciben danio"{
		assert.equals(100, paredNivel1.vida())
		assert. equals(0, paredNivel1.danioRecibido())
		assert.equals(100, paredNivel1.vidaRestante())
		paredNivel1.aplicarEfectoDeObjeto(balaNivel1)	
		assert.equals(85, paredNivel1.vidaRestante())
		assert.equals(15, paredNivel1.danioRecibido())	
	}
	
	//Subir de objetos tanque
	
	test "tanque player nivel 2 dispara una bala del mismo nivel y con mas danio" {
		assert.equals(1, tanque.nivel())
		tanque.disparar()
		assert.equals(1, wollokTanks.cantidadDeObjetosDeNivel_(1))
		assert.equals(0,  wollokTanks.cantidadDeObjetosDeNivel_(2))
		tanque.subirNivel()
		tanque.disparar()
			
		assert.equals(2, tanque.nivel())
		assert.equals(1, wollokTanks.cantidadDeObjetosDeNivel_(1))
		assert.equals(1, wollokTanks.cantidadDeObjetosDeNivel_(2))
	}

	test "tanque nivel 2 aumenta la vida"{	
		assert.equals(1, tanque.nivel())
		assert.equals(100, tanque.vida())
		tanque.subirNivel()
		assert.equals(200, tanque.vida())
	}
	
	//Subir de objetos Paredes
	
	test "Paredes de nivel 2, aumenta la vida"{
		assert.equals(100, paredNivel1.vida())
		paredNivel1.subirNivel()
		assert.equals(200, paredNivel1.vida())
		assert.equals(2, paredNivel1.nivel())
	}
			
}

